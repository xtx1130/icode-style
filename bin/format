#!/usr/bin/env node

const fs = require('fs')
const path = require('path')
const parseArgs = require('minimist')
const fse = require('fs-extra')
const klaw = require('klaw')
const through2 = require('through2')
const Log = require('@xtx1130/tb-log').Log
const jsLint = require('../src/jslint')
const cssLint = require('../src/csslint')
const vueLint = require('../src/vueLint')

const log = new Log('lint', false)
const argv = parseArgs(process.argv.slice(2))
let expectFiles = 'DS_Store|\\.git|deploy-conf|node_modules|output|dist|BCLOUD|package\\.json|build\\.js|ci\\.yml|readme|favicon\\.ico|\\.map$'

let pkgInfo
try {
  pkginfo = require(path.join(process.cwd(), 'package.json')).tbformat
  if(Array.isArray(pkginfo))
    pkginfo = pkginfo.join('|')
  expectFiles = expectFiles + '|' + pkginfo
} catch (e) {

}
const excludeFolder = through2.obj(function (item, enc, next) {
  if (!item.stats.isDirectory() && !item.path.match(new RegExp('(' + expectFiles + ')', 'ig'))) 
    this.push(item)
  next()
})
klaw(process.cwd()).pipe(excludeFolder)
  .on('data', (item) => {
    if (item.path.match(/\.js$/ig)) {
      let baseCode = fs.readFileSync(item.path, 'utf-8')
      let msg
      if(argv.fix)
        msg = jsLint(baseCode, item.path)
      else
        msg = jsLint(baseCode)
      if(!msg.fixed && argv.fix){
        if(msg.messages.length === 0){
          // log.warn(`${item.path} has been eslint-disable or it's a nodejs file`)
          return
        }
        log.error(`${item.path} format failed:`)
        for(let i = 0; i < msg.messages.length; i++) {
          log.error('Line:' + msg.messages[i].line + ' ' + msg.messages[i].ruleId + ' ' + msg.messages[i].message)
        }
        log.start('----------')
      } else if(!argv.fix){
        log.warn(`${item.path} lint info:`)
        for (let i = 0;i < msg.length; i++) {
          log.warn('Line:' + msg[i].line + ' ' + msg[i].message)
        }
      }
    } else if(item.path.match(/\.css$/ig)) {
      let baseCode = fs.readFileSync(item.path, 'utf-8')
      let output = cssLint(baseCode, argv.fix)
      if(output === false){
        log.error(`${item.path} has not been lint yet!`)
        process.exit(1)
      }
      argv.fix && fs.writeFileSync(item.path, output, {encoding: 'utf-8'})
    } else if(item.path.match(/\.vue$/ig)) {
      let baseCode = fs.readFileSync(item.path, 'utf-8')
      let output = vueLint(baseCode, argv.fix)
      if(output === false){
        log.error(`${item.path} has not been lint yet!`)
        process.exit(1)
      }
      argv.fix && fs.writeFileSync(item.path, output, {encoding: 'utf-8'})
    }
  })